import axios from "axios"
import type { NextPage } from "next"
import Head from "next/head"
import { useRouter } from "next/router"
import { useEffect, useState } from "react"
import FIlter from "../components/FIlter"
import Layout from "../components/Layout"
import Pagination from "../components/Pagination"
import { useAuth } from "../hooks/useAuth"

interface ILinkInfo {
  counter: number
  id: number
  short: string
  target: string
}

const Home: NextPage = () => {
  const [pageLimit, setPageLimit] = useState<number>(20)
  const [currentPage, setCurrentPage] = useState<number>(1)
  const [linkList, setLinkList] = useState([])
  const [initialLinkList, setInitialListList] = useState([])
  const [currentPageLinks, setCurrentPageLinks] = useState([])
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const SHORT_URL = "http://79.143.31.216/s/"

  const router = useRouter()
  const { token, sessionUserName, sessionUserPassword } = useAuth()

  console.log(token, sessionUserName, sessionUserPassword)

  const fetchData = async () => {
    // const BASE_STATS_URL = `http://79.143.31.216/statistics?offset=${pageOffset}&limit=${pageLimit}`
    const BASE_STATS_URL = `http://79.143.31.216/statistics?offset=0&limit=0`
    console.log("rEWUQWRE")

    await axios({
      method: "get",
      url: `http://79.143.31.216/statistics?offset=0&limit=0`,
      params: {
        username: sessionUserName,
        password: sessionUserPassword,
      },
      headers: {
        accept: "application/json",
        Authorization: "Bearer " + token,
      },
    })
      .then((res) => {
        console.log(res)
        if (res.data.length > 1) {
          console.log("tetete")

          setLinkList(res.data)
          setInitialListList(res.data)
          setIsLoading(false)
        }
      })
      .catch((e) => {
        console.log(e)
      })
  }

  useEffect(() => {
    if (token && sessionUserName && sessionUserPassword) {
      console.log("ALLL HERE")

      fetchData()
    } else {
      router.push("/auth")
    }
  }, [])

  // PAGE SELECT
  const selectPage = (pageNumber: number) => {
    setCurrentPage(pageNumber)
  }

  useEffect(() => {
    const indexOfLastLink = currentPage * pageLimit
    const indexOfFistLink = indexOfLastLink - pageLimit
    const slicedList = linkList.slice(indexOfFistLink, indexOfLastLink)
    setCurrentPageLinks(slicedList)
  }, [linkList, currentPage])

  console.log(currentPageLinks)

  return (
    <>
      <Head>
        <title>URL Shortener</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <div className="flex flex-col gap-4 w-full">
          {/* PAGINATION-FILTER */}

          {isLoading ? (
            <></>
          ) : (
            <div className="flex justify-between items-center w-full">
              <Pagination
                linksPerPage={pageLimit}
                totalLinks={linkList.length}
                selectPage={selectPage}
                activePage={currentPage}
              ></Pagination>
              <FIlter
                linkList={currentPageLinks}
                setCurrentPageLinks={setCurrentPageLinks}
              ></FIlter>
            </div>
          )}

          {isLoading ? (
            <div className="flex justify-center">
              <h1 className="font-bold text-xl">Loading...</h1>
            </div>
          ) : (
            <div className="flex flex-col border  border-black py-2  gap-4 mb-10 ">
              <div className="grid grid-cols-4  border-b border-black px-4 py-2">
                <h1 className="font-bold">SHORT URL</h1>
                <h1 className="font-bold">ORIGINAL URL </h1>
                <h1 className="font-bold"> VISITS</h1>
              </div>

              {/* TABLE CONTENTS */}
              {currentPageLinks &&
                currentPageLinks.map((link: ILinkInfo) => (
                  <div
                    key={link.id}
                    className="w-full grid grid-cols-4 justify-center items-center gap-10 border-b border-black/30 px-4 py-2 last:border-b-0 "
                  >
                    <h3>
                      <a
                        className="hover:text-blue-500 font-medium"
                        href={link.target}
                      >
                        {SHORT_URL + link.short}
                      </a>
                    </h3>
                    <h3 className="overflow-x-hidden">
                      <a
                        className="hover:text-blue-500 font-medium"
                        href={link.target}
                      >
                        {link.target}
                      </a>
                    </h3>
                    <h3>{link.counter}</h3>
                  </div>
                ))}
            </div>
          )}
        </div>
      </Layout>
    </>
  )
}

export default Home

{
  /* <div className="w-full flex ">
          <button
            onClick={hanldePreviousPage}
            className="hover:text-blue-500 p-2 flex justify-center items-center"
          >
            <AiOutlineLeft></AiOutlineLeft>
          </button>

          <button className="border hover:bg-blue-500 hover:text-white px-4 py-2">
            1
          </button>
          <button
            onClick={handleNextPage}
            className="hover:text-blue-500 p-2 flex justify-center items-center"
          >
            <AiOutlineRight></AiOutlineRight>
          </button>
        </div> */
}
